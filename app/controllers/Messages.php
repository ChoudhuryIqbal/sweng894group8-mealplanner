<?php
///////////////////////////////////////////////////////////////////////////////
// MealPlanner                             Penn State - Cohorts 19 & 20 @ 2018
///////////////////////////////////////////////////////////////////////////////
// Message Controller
///////////////////////////////////////////////////////////////////////////////
namespace Base\Controllers;

///////////////////////////////////////////////////////////////////////////////
// Autoload dependencies
///////////////////////////////////////////////////////////////////////////////
require_once __DIR__.'/../../vendor/autoload.php';

///////////////////////////////////////////////////////////////////////////////
// Standard classes
///////////////////////////////////////////////////////////////////////////////
use Base\Core\Controller;
use Base\Core\DatabaseHandler;
use Base\Helpers\Session;
use Base\Helpers\Redirect;
use Base\Helpers\Format;
use Base\Helpers\Log;
use \Valitron\Validator;

///////////////////////////////////////////////////////////////////////////////
// Messages-specific classes
///////////////////////////////////////////////////////////////////////////////
use Base\Models\Message;

///////////////////////////////////////////////////////////////////////////////
// Inbox related definitions
///////////////////////////////////////////////////////////////////////////////
define('_DISPLAY_NORMAL_',  1);
define('_DISPLAY_STARS_',   2);
define('_DISPLAY_READ_',    3);
define('_DISPLAY_NEW_',     4);
define('_DISPLAY_TRASH_',   5);
define('_DISPLAY_SENT_',    6);

///////////////////////////////////////////////////////////////////////////////
// Messaging
///////////////////////////////////////////////////////////////////////////////
/**
 * Handles messaging between users
 */
class Messages extends Controller
{
    protected $dph;
    protected $session;
    protected $request;
    protected $log;

    private $messageRepository;
    private $dbh;

    ///////////////////////////////////////////////////////////////////////////
    //                              Constructor                              //
    ///////////////////////////////////////////////////////////////////////////

    public function __construct(DatabaseHandler $dbh, Session $session, $request)
    {
        $this->dbh     = $dbh;
        $this->session = $session;
        $this->request = $request;
        $this->log = new Log($dbh);

        $this->dbh = DatabaseHandler::getInstance();
    }

    ///////////////////////////////////////////////////////////////////////////
    //                           Inbound messages                            //
    ///////////////////////////////////////////////////////////////////////////


    ///////////////////////////////////////////////////////////////////////////
    // inbox()
    ///////////////////////////////////////////////////////////////////////////
    // /message/inbox/ Display the messages user has received (and not trashed)
    ///////////////////////////////////////////////////////////////////////////
    // Returns: -
    ///////////////////////////////////////////////////////////////////////////

    /**
     * Displays the messaging inbox
     */
    public function inbox():void
    {
        $this->view('message/inbox');
    }

    ///////////////////////////////////////////////////////////////////////////
    // starred()
    ///////////////////////////////////////////////////////////////////////////
    // /message/inbox/ Display the starred messages user has received
    ///////////////////////////////////////////////////////////////////////////
    // Returns: -
    ///////////////////////////////////////////////////////////////////////////

    /**
     * Shows starred messages
     */
    public function starred():void
    {
        $displayType = _DISPLAY_STARS_;
        $this->view('message/inbox', compact('displayType'));
    }

    ///////////////////////////////////////////////////////////////////////////
    // read()
    ///////////////////////////////////////////////////////////////////////////
    // /message/inbox/ Display the read messages user has received
    ///////////////////////////////////////////////////////////////////////////
    // Returns: -
    ///////////////////////////////////////////////////////////////////////////
    /**
     * Shows read messages
     */
    public function read():void
    {
        $displayType = _DISPLAY_READ_;
        $this->view('message/inbox', compact('displayType'));
    }

    ///////////////////////////////////////////////////////////////////////////
    // unread()
    ///////////////////////////////////////////////////////////////////////////
    // /message/inbox/ Display the unread messages user has received
    ///////////////////////////////////////////////////////////////////////////
    // Returns: -
    ///////////////////////////////////////////////////////////////////////////
    /**
     * Shows unread messages
     */
    public function unread():void
    {
        $displayType = _DISPLAY_NEW_;
        $this->view('message/inbox', compact('displayType'));
    }

    ///////////////////////////////////////////////////////////////////////////
    // trash()
    ///////////////////////////////////////////////////////////////////////////
    // /message/inbox/ Display the deleted messages user has received
    ///////////////////////////////////////////////////////////////////////////
    // Returns: -
    ///////////////////////////////////////////////////////////////////////////
    /**
     * Shows trashes messages
     */
    public function trash():void
    {
        $displayType = _DISPLAY_TRASH_;
        $this->view('message/inbox', compact('displayType'));
    }

    ///////////////////////////////////////////////////////////////////////////
    // open()
    ///////////////////////////////////////////////////////////////////////////
    // /message/open/ Display a message user has received (and not trashed)
    ///////////////////////////////////////////////////////////////////////////
    // Returns: -
    ///////////////////////////////////////////////////////////////////////////
    /**
     * Opens a message
     * @param  integer $messageID Message to openlog
     */
    public function open($messageID):void
    {
        $this->view('message/open', compact('messageID'));
    }

    ///////////////////////////////////////////////////////////////////////////
    //                          Outbound messages                            //
    ///////////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////////////
    // outbox()
    ///////////////////////////////////////////////////////////////////////////
    // /message/outbox/ Display the messages user has sent
    ///////////////////////////////////////////////////////////////////////////
    // Returns: -
    ///////////////////////////////////////////////////////////////////////////
    /**
     * Displays sent messages
     */
    public function outbox():void
    {
        $displayType = _DISPLAY_SENT_;
        $this->view('message/inbox', compact('displayType'));
    }

    ///////////////////////////////////////////////////////////////////////////
    // compose()
    ///////////////////////////////////////////////////////////////////////////
    // /message/compose/ Compose a message
    ///////////////////////////////////////////////////////////////////////////
    // Returns: -
    ///////////////////////////////////////////////////////////////////////////
    /**
     * Allows user to compose a message
     * @param  integer $targetID Message target
     */
    public function compose($targetID = NULL):void
    {
        $this->view('message/compose', compact('targetID'));
    }

    ///////////////////////////////////////////////////////////////////////////
    // send()
    ///////////////////////////////////////////////////////////////////////////
    // /message/compose/ Compose a message
    ///////////////////////////////////////////////////////////////////////////
    // Returns: -
    ///////////////////////////////////////////////////////////////////////////
    public function send()
    {
        $input = $this->request;

        $this->view('message/compose', compact('input'));
    }
}
